###############################################################################
#
#    LOGGING section
#
###############################################################################
logging:

    # Default logging levels are specified here for each of the three peer
    # commands 'node', 'network' and 'chaincode'. For commands that have
    # subcommands, the defaults also apply to all subcommands of the command.
    # Valid logging levels are case-insensitive strings chosen from

    #     CRITICAL | ERROR | WARNING | NOTICE | INFO | DEBUG

    # The logging levels specified here can be overridden in various ways,
    # listed below from strongest to weakest:
    #
    # 1. The --logging-level=<level> command line option overrides all other
    #    specifications.
    #
    # 2. The environment variable CORE_LOGGING_LEVEL otherwise applies to
    #    all peer commands if defined as a non-empty string.
    #
    # 3. The environment variables CORE_LOGGING_[NODE|NETWORK|CHAINCODE]
    #    otherwise apply to the respective peer commands if defined as non-empty
    #    strings.
    #
    # 4. Otherwise, the specifications below apply.
    #
    # Developers: Please see fabric/docs/Setup/logging-control.md for more
    # options.
    peer:       warning
    node:       info
    network:    warning
    chaincode:  warning
    version:    warning
    protoutils: debug
    error:      warning

    format: '%{color}%{time:2006-01-02 15:04:05.000 MST} [%{module}] %{shortfunc} -> %{level:.4s} %{id:03x}%{color:reset} %{message}'

###############################################################################
#
#    Peer section
#
###############################################################################
peer:

    # The Peer id is used for identifying this Peer instance.
    id: jdoe

    # The networkId allows for logical seperation of networks
    # networkId: dev
    # networkId: test
    networkId: dev

    # The Address this Peer will listen on
    listenAddress: 0.0.0.0:7051
    # The Address this Peer will bind to for providing services
    address: 0.0.0.0:7051
    # Whether the Peer should programmatically determine the address to bind to.
    # This case is useful for docker containers.
    addressAutoDetect: false

    # Setting for runtime.GOMAXPROCS(n). If n < 1, it does not change the current setting
    gomaxprocs: -1
    workers: 2

    # Gossip related configuration
    gossip:
        bootstrap: 0.0.0.0:7051
        # For debug - is peer is its org leader and should pass blocks from orderer to other peers in org
        orgLeader: true

    # Sync related configuration
    sync:
        blocks:
            # Channel size for readonly SyncBlocks messages channel for receiving
            # blocks from oppositie Peer Endpoints.
            # NOTE: currently messages are not stored and forwarded, but rather
            # lost if the channel write blocks.
            channelSize: 10
        state:
            snapshot:
                # Channel size for readonly syncStateSnapshot messages channel
                # for receiving state deltas for snapshot from oppositie Peer Endpoints.
                # NOTE: when the channel is exhausted, the writes block for up to the
                # writeTimeout specified below
                channelSize: 50
                # Write timeout for the syncStateSnapshot messages
                # When the channel above is exhausted, messages block before being
                # discarded for this amount of time
                writeTimeout: 60s
            deltas:
                # Channel size for readonly syncStateDeltas messages channel for
                # receiving state deltas for a syncBlockRange from oppositie
                # Peer Endpoints.
                # NOTE: currently messages are not stored and forwarded,
                # but rather lost if the channel write blocks.
                channelSize: 20

    # Validator defines whether this peer is a validating peer or not, and if
    # it is enabled, what consensus plugin to load
    events:
        # The address that the Event service will be enabled on the validator
        address: 0.0.0.0:7053

        # total number of events that could be buffered without blocking the
        # validator sends
        buffersize: 100

        # milliseconds timeout for producer to send an event.
        # if < 0, if buffer full, unblocks immediately and not send
        # if 0, if buffer full, will block and guarantee the event will be sent out
        # if > 0, if buffer full, blocks till timeout
        timeout: 10

    # ----!!!!IMPORTANT!!!-!!!IMPORTANT!!!-!!!IMPORTANT!!!!----
    # THIS HAS TO BE DONE IN THE CONTEXT OF BOOTSTRAP. TILL THAT
    # IS DESIGNED AND FINALIZED, THE FOLLOWING COMMITTER/ORDERER
    # DEFINITIONS HAVE TO SERVE AS THE MEANS TO DRIVE A SIMPLE
    # SKELETON.
    #
    # All "chaincode" commands from CLI (except "query") will
    # send response from the endorser to the Committer defined below.
    committer:
        enabled: true
        ledger:
            # orderer to talk to
            orderer: 0.0.0.0:7050

    # TLS Settings for p2p communications
    tls:
        enabled:  false
        cert:
            file: testdata/server1.pem
        key:
            file: testdata/server1.key
    # Root cert file for selfsigned certificates
    # This represents a self-signed x509 cert that was used to sign the cert.file,
    # this is sent to client to validate the recived certificate from server when
    # establishing TLS connection
        rootcert:
            file:
        # The server name use to verify the hostname returned by TLS handshake
        serverhostoverride:

    # Path on the file system where peer will store data (eg ledger)
    fileSystemPath: /var/hyperledger/production

    # Path on the file system where peer will find MSP local configurations
    mspConfigPath: msp/sampleconfig

    # Used with Go profiling tools only in none production environment. In
    # production, it should be disabled (eg enabled: false)
    profile:
        enabled:     false
        listenAddress: 0.0.0.0:6060

###############################################################################
#
#    VM section
#
###############################################################################
vm:

    # Endpoint of the vm management system.  For docker can be one of the following in general
    # unix:///var/run/docker.sock
    # http://localhost:2375
    # https://localhost:2376
    endpoint: unix:///var/run/docker.sock

    # settings for docker vms
    docker:
        tls:
            enabled: false
            cert:
                file: /path/to/server.pem
            ca:
                file: /path/to/ca.pem
            key:
                file: /path/to/server-key.pem

        # Enables/disables the standard out/err from chaincode containers for debugging purposes
        attachStdout: false

        # Parameters of docker container creating. For docker can created by custom parameters
        # If you have your own ipam & dns-server for cluster you can use them to create container efficient.
        # NetworkMode Sets the networking mode for the container. Supported standard values are: `host`(default),`bridge`,`ipvlan`,`none`
        # dns A list of DNS servers for the container to use.
        # note: not support customize for `Privileged` `Binds` `Links` `PortBindings`
        # not support set LogConfig using Environment Variables
        # LogConfig sets the logging driver (Type) and related options (Config) for Docker
        # you can refer https://docs.docker.com/engine/admin/logging/overview/ for more detail configruation.
        hostConfig:
            NetworkMode: host
            Dns:
               # - 192.168.0.1
            LogConfig:
                Type: json-file
                Config:
                    max-size: "50m"
                    max-file: "5"
            Memory: 2147483648

###############################################################################
#
#    Chaincode section
#
###############################################################################
chaincode:

    # The id is used by the Chaincode stub to register the executing Chaincode
    # ID with the Peerand is generally supplied through ENV variables
    # the Path form of ID is provided when deploying the chaincode. The name is
    # used for all other requests. The name is really a hashcode
    # returned by the system in response to the deploy transaction. In
    # development mode where user runs the chaincode, the name can be any string
    id:
        path:
        name:

    golang:

        # This is the basis for the Golang Dockerfile.  Additional commands will
        # be appended depedendent upon the chaincode specification.
        Dockerfile:  |
          FROM hyperledger/fabric-ccenv:$(ARCH)-$(PROJECT_VERSION)
          COPY src $GOPATH/src
          WORKDIR $GOPATH

    car:

        # This is the basis for the CAR Dockerfile.  Additional commands will
        # be appended depedendent upon the chaincode specification.
        Dockerfile:  |
            FROM hyperledger/fabric-ccenv:$(ARCH)-$(PROJECT_VERSION)

    java:
        # This is an image based on java:openjdk-8 with addition compiler
        # tools added for java shim layer packaging.
        # This image is packed with shim layer libraries that are necessary
        # for Java chaincode runtime.
        Dockerfile:  |
            from hyperledger/fabric-javaenv:$(ARCH)-$(PROJECT_VERSION)

    # timeout in millisecs for starting up a container and waiting for Register
    # to come through. 1sec should be plenty for chaincode unit tests
    startuptimeout: 300000

    #timeout in millisecs for deploying chaincode from a remote repository.
    deploytimeout: 30000

    #mode - options are "dev", "net"
    #dev - in dev mode, user runs the chaincode after starting validator from
    # command line on local machine
    #net - in net mode validator will run chaincode in a docker container

    mode: net
    # typically installpath should not be modified. Otherwise, user must ensure
    # the chaincode executable is placed in the path specifed by installpath in
    # the image
    installpath: /opt/gopath/bin/

    # keepalive in seconds. In situations where the communiction goes through a
    # proxy that does not support keep-alive, this parameter will maintain connection
    # between peer and chaincode.
    # A value <= 0 turns keepalive off
    keepalive: 0

    # system chaincodes whitelist. To add system chaincode "myscc" to the
    # whitelist, add "myscc: enable" to the list below, and register in
    # chaincode/importsysccs.go
    system:
        cscc: enable
        lccc: enable
        escc: enable
        vscc: enable
        qscc: enable

###############################################################################
#
#    Ledger section - ledger configuration encompases both the blockchain
#    and the state
#
###############################################################################
ledger:

  blockchain:

  state:
    # stateDatabase - options are "goleveldb", "CouchDB"
    # goleveldb - default state database stored in goleveldb.
    # CouchDB - store state database in CouchDB
    stateDatabase: goleveldb
    couchDBConfig:
       couchDBAddress: 127.0.0.1:5984
       username:
       password:

       # Limit on the number of records to return per query
       queryLimit: 1000

    # historyDatabase - options are true or false
    # Indicates if the history of key updates should be stored in goleveldb
    historyDatabase: true

###############################################################################
#
#    Security section - Applied to all entities (client, NVP, VP)
#
###############################################################################
security:
    # Can be 256 or 384.
    level: 256

    # Can be SHA2 or SHA3.
    hashAlgorithm: SHA2
