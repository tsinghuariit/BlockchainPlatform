// Code generated by protoc-gen-go.
// source: msp/mspconfig.proto
// DO NOT EDIT!

/*
Package msp is a generated protocol buffer package.

It is generated from these files:
	msp/mspconfig.proto

It has these top-level messages:
	MSPConfig
	FabricMSPConfig
	SigningIdentityInfo
	KeyInfo
*/
package msp

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// MSPConfig collects all the configuration information for
// an MSP. The Config field should be unmarshalled in a way
// that depends on the Type
type MSPConfig struct {
	// Type holds the type of the MSP; the default one would
	// be of type FABRIC implementing an X.509 based provider
	Type int32 `protobuf:"varint,1,opt,name=Type" json:"Type,omitempty"`
	// Config is MSP dependent configuration info
	Config []byte `protobuf:"bytes,2,opt,name=Config,proto3" json:"Config,omitempty"`
}

func (m *MSPConfig) Reset()                    { *m = MSPConfig{} }
func (m *MSPConfig) String() string            { return proto.CompactTextString(m) }
func (*MSPConfig) ProtoMessage()               {}
func (*MSPConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// FabricMSPConfig collects all the configuration information for
// a Fabric MSP.
// Here we assume a default certificate validation policy, where
// any certificate signed by any of the listed rootCA certs would
// be considered as valid under this MSP.
// This MSP may or may not come with a signing identity. If it does,
// it can also issue signing identities. If it does not, it can only
// be used to validate and verify certificates.
type FabricMSPConfig struct {
	// Name holds the identifier of the MSP; MSP identifier
	// is chosen by the application that governs this MSP.
	// For example, and assuming the default implementation of MSP,
	// that is X.509-based and considers a single Issuer,
	// this can refer to the Subject OU field or the Issuer OU field.
	Name string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	// List of root certificates associated
	RootCerts [][]byte `protobuf:"bytes,2,rep,name=RootCerts,proto3" json:"RootCerts,omitempty"`
	// Identity denoting the administrator of this MSP
	Admins [][]byte `protobuf:"bytes,3,rep,name=Admins,proto3" json:"Admins,omitempty"`
	// Identity revocation list
	RevocationList [][]byte `protobuf:"bytes,4,rep,name=RevocationList,proto3" json:"RevocationList,omitempty"`
	// SigningIdentity holds information on the signing identity
	// this peer is to use, and which is to be imported by the
	// MSP defined before
	SigningIdentity *SigningIdentityInfo `protobuf:"bytes,5,opt,name=SigningIdentity" json:"SigningIdentity,omitempty"`
}

func (m *FabricMSPConfig) Reset()                    { *m = FabricMSPConfig{} }
func (m *FabricMSPConfig) String() string            { return proto.CompactTextString(m) }
func (*FabricMSPConfig) ProtoMessage()               {}
func (*FabricMSPConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *FabricMSPConfig) GetSigningIdentity() *SigningIdentityInfo {
	if m != nil {
		return m.SigningIdentity
	}
	return nil
}

// SigningIdentityInfo represents the configuration information
// related to the signing identity the peer is to use for generating
// endorsements
type SigningIdentityInfo struct {
	// PublicSigner carries the public information of the signing
	// identity. For an X.509 provider this would be represented by
	// an X.509 certificate
	PublicSigner []byte `protobuf:"bytes,1,opt,name=PublicSigner,proto3" json:"PublicSigner,omitempty"`
	// PrivateSigner denotes a reference to the private key of the
	// peer's signing identity
	PrivateSigner *KeyInfo `protobuf:"bytes,2,opt,name=PrivateSigner" json:"PrivateSigner,omitempty"`
}

func (m *SigningIdentityInfo) Reset()                    { *m = SigningIdentityInfo{} }
func (m *SigningIdentityInfo) String() string            { return proto.CompactTextString(m) }
func (*SigningIdentityInfo) ProtoMessage()               {}
func (*SigningIdentityInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SigningIdentityInfo) GetPrivateSigner() *KeyInfo {
	if m != nil {
		return m.PrivateSigner
	}
	return nil
}

// KeyInfo represents a (secret) key that is either already stored
// in the bccsp/keystore or key material to be imported to the
// bccsp key-store. In later versions it may contain also a
// keystore identifier
type KeyInfo struct {
	// Identifier of the key inside the default keystore; this for
	// the case of Software BCCSP as well as the HSM BCCSP would be
	// the SKI of the key
	KeyIdentifier string `protobuf:"bytes,1,opt,name=KeyIdentifier" json:"KeyIdentifier,omitempty"`
	// KeyMaterial (optional) for the key to be imported; this is
	// properly encoded key bytes, prefixed by the type of the key
	KeyMaterial []byte `protobuf:"bytes,2,opt,name=KeyMaterial,proto3" json:"KeyMaterial,omitempty"`
}

func (m *KeyInfo) Reset()                    { *m = KeyInfo{} }
func (m *KeyInfo) String() string            { return proto.CompactTextString(m) }
func (*KeyInfo) ProtoMessage()               {}
func (*KeyInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*MSPConfig)(nil), "msp.MSPConfig")
	proto.RegisterType((*FabricMSPConfig)(nil), "msp.FabricMSPConfig")
	proto.RegisterType((*SigningIdentityInfo)(nil), "msp.SigningIdentityInfo")
	proto.RegisterType((*KeyInfo)(nil), "msp.KeyInfo")
}

func init() { proto.RegisterFile("msp/mspconfig.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 327 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x92, 0x4d, 0x6b, 0xf2, 0x40,
	0x14, 0x85, 0x89, 0x5f, 0x2f, 0xb9, 0xc6, 0x57, 0x18, 0xa1, 0xcc, 0xa2, 0x8b, 0x10, 0x4a, 0x09,
	0x5d, 0x24, 0x60, 0x17, 0x5d, 0x57, 0xa1, 0x20, 0xd6, 0x62, 0xc7, 0xae, 0xba, 0x4b, 0xe2, 0x24,
	0x0e, 0x38, 0x1f, 0xcc, 0x8c, 0x42, 0x7e, 0x61, 0xff, 0x56, 0xc9, 0x18, 0x68, 0x23, 0xdd, 0x9d,
	0x7b, 0x9e, 0x7b, 0x73, 0x08, 0x67, 0x60, 0xc6, 0x8d, 0x4a, 0xb9, 0x51, 0x85, 0x14, 0x25, 0xab,
	0x12, 0xa5, 0xa5, 0x95, 0xa8, 0xcf, 0x8d, 0x8a, 0x9e, 0xc0, 0xdf, 0xec, 0xb6, 0x4b, 0xe7, 0x23,
	0x04, 0x83, 0x8f, 0x5a, 0x51, 0xec, 0x85, 0x5e, 0x3c, 0x24, 0x4e, 0xa3, 0x1b, 0x18, 0x5d, 0x28,
	0xee, 0x85, 0x5e, 0x1c, 0x90, 0x76, 0x8a, 0xbe, 0x3c, 0x98, 0xbe, 0x64, 0xb9, 0x66, 0x45, 0xe7,
	0xfe, 0x2d, 0xe3, 0x97, 0x7b, 0x9f, 0x38, 0x8d, 0x6e, 0xc1, 0x27, 0x52, 0xda, 0x25, 0xd5, 0xd6,
	0xe0, 0x5e, 0xd8, 0x8f, 0x03, 0xf2, 0x63, 0x34, 0x5f, 0x7f, 0xde, 0x73, 0x26, 0x0c, 0xee, 0x3b,
	0xd4, 0x4e, 0xe8, 0x1e, 0xfe, 0x13, 0x7a, 0x96, 0x45, 0x66, 0x99, 0x14, 0xaf, 0xcc, 0x58, 0x3c,
	0x70, 0xfc, 0xca, 0x45, 0x0b, 0x98, 0xee, 0x58, 0x25, 0x98, 0xa8, 0x56, 0x7b, 0x2a, 0x2c, 0xb3,
	0x35, 0x1e, 0x86, 0x5e, 0x3c, 0x9e, 0xe3, 0x84, 0x1b, 0x95, 0x5c, 0xb1, 0x95, 0x28, 0x25, 0xb9,
	0x3e, 0x88, 0x38, 0xcc, 0xfe, 0xd8, 0x43, 0x11, 0x04, 0xdb, 0x53, 0x7e, 0x64, 0x45, 0x03, 0xa9,
	0x76, 0x3f, 0x15, 0x90, 0x8e, 0x87, 0xe6, 0x30, 0xd9, 0x6a, 0x76, 0xce, 0x2c, 0x6d, 0x97, 0x7a,
	0x2e, 0x3c, 0x70, 0xe1, 0x6b, 0x7a, 0x09, 0xec, 0xae, 0x44, 0xef, 0xf0, 0xaf, 0x25, 0xe8, 0x0e,
	0x26, 0x8d, 0x74, 0xa9, 0x25, 0x6b, 0x33, 0x7c, 0xd2, 0x35, 0x51, 0x08, 0xe3, 0x35, 0xad, 0x37,
	0x99, 0xa5, 0x9a, 0x65, 0xc7, 0xb6, 0x86, 0xdf, 0xd6, 0xe2, 0xe1, 0x33, 0xae, 0x98, 0x3d, 0x9c,
	0xf2, 0xa4, 0x90, 0x3c, 0x3d, 0xd4, 0x8a, 0xea, 0x23, 0xdd, 0x57, 0x54, 0xa7, 0xa5, 0x6b, 0x28,
	0x75, 0x85, 0x9b, 0xe6, 0x05, 0xe4, 0x23, 0xa7, 0x1f, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x52,
	0xc4, 0x19, 0xdb, 0x13, 0x02, 0x00, 0x00,
}
